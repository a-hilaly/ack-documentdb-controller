ignore:
  resource_names:
      # DBCluster
      - DBClusterParameterGroup
      - DBClusterSnapshot
      - DBInstance
      - DBSubnetGroup
      - EventSubscription
      - GlobalCluster
controller_name: documentdb
sdk_names:
  model_name: docdb
  package_name: docdb
operations:
  DeleteDBCluster:
    override_values:
      # Clearly this is not ideal, but will suffice until we add custom hook
      # points to the build_request methods to enable a genmeration of the
      # final snapshot identifier to use.
      SkipFinalSnapshot: true
  ModifyDBCluster:
    override_values:
      # The whole concept of a "maintenance window" isn't aligned with the
      # declarative state model in Kubernetes. Users should build "maintenance
      # window" functionality at a higher layer than the APIs that manage the
      # lifecycle of individual resources like a DB cluster or DB instance. For
      # example, users can build maintenance window functionality into their
      # deployment pipeline solution or GitOps solution.
      #
      # We override the value of the ApplyImmediately field in the modify
      # operations to "true" because we want changes that a Kubernetes user
      # makes to a resource's Spec to be reconciled by the ACK service
      # controller, not a different service.
      ApplyImmediately: true
      # We override the value of AllowMajorVersionUpgrade field in the modify
      # call since any engine version change should apply directly.
      # This flag was designed as a protect flag but not necessary in controller
      # side when customer need to make the engine version change
      AllowMajorVersionUpgrade: true
resources:
  DBCluster:
    hooks:
      delta_pre_compare:
        code: compareTags(delta, a, b)
      sdk_create_pre_build_request:
        template_path: hooks/db_cluster/sdk_create_pre_build_request.go.tpl
      sdk_create_post_set_output:
        template_path: hooks/db_cluster/sdk_create_post_set_output.go.tpl
      sdk_read_many_post_set_output:
        template_path: hooks/db_cluster/sdk_read_many_post_set_output.go.tpl
      sdk_delete_pre_build_request:
        template_path: hooks/db_cluster/sdk_delete_pre_build_request.go.tpl
      sdk_file_end:
        template_path: hooks/db_cluster/sdk_file_end.go.tpl
    exceptions:
      terminal_codes:
        - DBClusterQuotaExceededFault
        - DBSubnetGroupDoesNotCoverEnoughAZs
        - InsufficientStorageClusterCapacity
        - InvalidParameter
        - InvalidParameterValue
        - InvalidParameterCombination
        - InvalidSubnet
        - StorageQuotaExceeded
    update_operation:
      custom_method_name: customUpdate
    fields:
      DBClusterIdentifier:
        is_primary_key: true
      MasterUserPassword:
        is_secret: true
      KmsKeyId:
        references:
          resource: Key
          service_name: kms
          path: Status.ACKResourceMetadata.ARN
      MasterUserSecretKmsKeyId:
        references:
          resource: Key
          service_name: kms
          path: Status.ACKResourceMetadata.ARN
      # DBClusterParameterGroupName:
      #  references:
      #    resource: DBClusterParameterGroup
      #    path: Spec.Name
      # DBSubnetGroupName:
      #  references:
      #    resource: DBSubnetGroup
      #    path: Spec.Name
      VpcSecurityGroupIds:
        references:
          resource: SecurityGroup
          service_name: ec2
          path: Status.ID
      SnapshotIdentifier:
        from:
          operation: RestoreDBClusterFromSnapshot
          path: SnapshotIdentifier
      Tags:
        compare:
          # We have a custom comparison function...
          is_ignored: true